<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- [y] hybris Platform Copyright (c) 2017 SAP SE or an SAP affiliate company. All rights reserved. This software is the 
    confidential and proprietary information of SAP ("Confidential Information"). You shall not disclose such Confidential Information 
    and shall use it only in accordance with the terms of the license agreement you entered into with SAP. --><!-- All hybris buildcallbacks.xml macrodefinitions: Build/Documentation before/after ant macro "clean" <macrodef name="wirecardcore_before_clean"/> 
    <macrodef name="wirecardcore_after_clean"/> before/after ant macro "build" <macrodef name="wirecardcore_before_build"/> <macrodef 
    name="wirecardcore_after_build"/> before/after ant macro "compile_core" - the core module of the extension <macrodef name="wirecardcore_before_compile_core"> 
    <macrodef name="wirecardcore_after_compile_core"> before/after ant macro "compile_web" - the web module of the extension 
    <macrodef name="wirecardcore_before_compile_web" /> <macrodef name="wirecardcore_after_compile_web" /> before/after ant macro 
    "compile_hmc" - the hmc module of the extension <macrodef name="wirecardcore_before_compile_hmc" /> <macrodef name="wirecardcore_after_compile_hmc" 
    /> Preparing extension will be called in the beginning of the ant call and only once (also when using multiple ant targets 
    e.g. ant build yunittest) <macrodef name="wirecardcore_only_once_prepare"/> Creating ear module/production before/after ant 
    macro "ear" <macrodef name="wirecardcore_before_ear"/> <macrodef name="wirecardcore_after_ear"/> before/after ant macro "production" 
    - for hybris server only <macrodef name="wirecardcore_before_production" /> <macrodef name="wirecardcore_after_production" 
    /> JUnit Test before/after ant macro "yunitinit" <macrodef name="wirecardcore_before_yunitinit" /> <macrodef name="wirecardcore_after_yunitinit" 
    /> before/after ant macro "yunit" <macrodef name="wirecardcore_before_yunit" /> <macrodef name="wirecardcore_after_yunit" 
    /> Distribution package before/after ant macro "dist" - internal target; only for use when platform is available in source 
    code <macrodef name="wirecardcore_after_dist"/> <macrodef name="wirecardcore_before_dist"/> before/after ant macro "dist_copy" 
    - internal target; only for use when platform is available in source code <macrodef name="wirecardcore_before_dist_copy"/> 
    <macrodef name="wirecardcore_after_dist_copy"/> With these filters you can override the default extension filters defined 
    in platform/resources/ant/dist/filtersets.xml <patternset id="extension.wirecardcore.binary.filter"> <patternset refid="extension.filter" 
    /> <exclude name="**/*-source.jar" /> </patternset> <patternset id="extension.wirecardcore.source.filter"> <exclude name="**/bin/**" 
    /> </patternset> With this filter you can decide what should be excluded from development zip. <patternset id="extension.wirecardcore.devzip.filter"> 
    Include all files from extension.source.filter. <patternset refid="extension.source.filter" /> Exclude unwanted files. <exclude 
    name="lib/exclude-me.jar" /> </patternset> -->
<project name="wirecardcore_buildcallbacks">

    <!-- Called whenever 'ant ear' is used. this callback can be used to modify the content of the ear file ${ear.path}: 
        path to ear -->
    <macrodef name="wirecardcore_before_ear">
        <sequential>

            <!-- you can do anything before the EAR file is being packed -->

        </sequential>
    </macrodef>

    <macrodef name="wirecardcore_before_build">
        <sequential>
            <echo message="mkdir gensrc"/>
            <mkdir dir="${ext.wirecardcore.path}/gensrc"/>

            <xjc schema="${ext.wirecardcore.path}/resources/xsd/wirecard_payment.xsd"
                 package="com.wirecard.hybris.core.data.types"
                 destdir="${ext.wirecardcore.path}/gensrc">
                <produces dir="${ext.wirecardcore.path}/gensrc/com/wirecard/hybris/core/data/types"
                          includes="*.java"/>
            </xjc>
        </sequential>
    </macrodef>

</project>
